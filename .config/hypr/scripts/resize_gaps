#!/usr/bin/env python3

from subprocess import run, check_output
from json import loads
from sys import argv, exit

def get_current_gaps(option: str):
  gaps_info = check_output(
      ['hyprctl', '-j', 'getoption', option], text=True
    )

  return loads(gaps_info)["custom"].split() # output like ["2", "2", "2", "2"]

def update_gaps(option: str, values: list[str]):
  values = ' '.join(values)
  run(['hyprctl', 'keyword', option, values])
  run(['notify-send', '-r', '2', f'Gaps ({option.split('_')[-1]}): {values}', '--icon=node-transform'])

def modify_gaps_values_by(values: list[str], modifier: int):
  for i, value in enumerate(values):
    modified = int(value) + modifier
    if modified >= 0:
      values[i] = str(modified) 
  return values

def main(option: str, modifier: int):
  modifed_gaps = modify_gaps_values_by(get_current_gaps(option), modifier)
  update_gaps(option, modifed_gaps)

if __name__ == '__main__':
  if len(argv) < 2:
    print("Not enough aruments.")
    print("Usage : resize_gaps.py gaps_type : [in, out], modifier : [number]")
    exit(1)

  if argv[1] in ('in', 'out'):
    option = "general:gaps_out" if argv[1] == 'out' else "general:gaps_in"

  else:
      print(f'Invalid argument: {argv[1]}')
      exit(1)

  try:
      modifier = int(argv[2])

  except ValueError:
      print(f'Invalid argument: {argv[2]}')
      exit(2)

  main(option, modifier)